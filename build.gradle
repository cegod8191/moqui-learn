/*
 * This Work is in the public domain and is provided on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE,
 * NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 * You are solely responsible for determining the appropriateness of using
 * this Work and assume any risks associated with your use of this Work.
 *
 * This Work includes contributions authored by David E. Jones, not as a
 * "work for hire", who hereby disclaims any copyright to the same.
 */

allprojects { version = '1.2.0' }

def tomcatHome = '../apache-tomcat-7.0.27'
def warName = 'moqui-' + version + '.war'
def execTempDir = 'execwartmp'

def moquiRuntime = './runtime'

def moquiConfDev = 'conf/MoquiDevConf.xml'
def moquiConfProduction = 'conf/MoquiProductionConf.xml'

// ========== clean tasks ==========

task clean(type: Delete) { delete file(warName); delete file(execTempDir) }
task cleanTempDir(type: Delete) { delete file(execTempDir) }
task cleanDb(type: Delete) { delete files(file(moquiRuntime+'/db/derby').listFiles()) - files(moquiRuntime+'/db/derby/derby.properties') }
task cleanLog(type: Delete) { delete fileTree(dir: moquiRuntime+'/log', include: '*') }
task cleanOther(type: Delete) { delete fileTree(dir: '.', includes: ['**/.nbattrs', '**/*~', '**/.#*', '**/.DS_Store', '**/*.rej', '**/*.orig']) }

task cleanAll {
    dependsOn clean
    dependsOn ':framework:clean'
    dependsOn cleanDb
    dependsOn cleanLog
    dependsOn cleanOther
}

// ========== run tasks ==========

task run(type: JavaExec) {
    dependsOn ':framework:build'
    dependsOn cleanTempDir
    workingDir = '.'; jvmArgs = ['-server', '-XX:MaxPermSize=64m']; maxHeapSize = '256M'
    systemProperties = ['moqui.conf':moquiConfDev, 'moqui.runtime':moquiRuntime]
    // NOTE: this is a hack, using -jar instead of a class name, and then the first argument is the name of the jar file
    main = '-jar'; args = [warName]
}
task runStaging(type: JavaExec) {
    dependsOn ':framework:build'
    dependsOn cleanTempDir
    workingDir = '.'; jvmArgs = ['-server', '-XX:MaxPermSize=64m', '-Xms512M']; maxHeapSize = '512M'
    systemProperties = ['moqui.conf':'conf/MoquiStagingConf.xml']
    main = '-jar'; args = [warName]
}
task runProduction(type: JavaExec) {
    dependsOn ':framework:build'
    dependsOn cleanTempDir
    workingDir = '.'; jvmArgs = ['-server', '-XX:MaxPermSize=128m', '-Xms512M']; maxHeapSize = '512M'
    systemProperties = ['moqui.conf':moquiConfProduction, 'moqui.runtime':moquiRuntime]
    main = '-jar'; args = [warName]
}

task load(type: JavaExec) {
    dependsOn ':framework:build'
    workingDir = '.'; jvmArgs = ['-server', '-XX:MaxPermSize=64m']; maxHeapSize = '256M'
    systemProperties = ['moqui.conf':moquiConfDev, 'moqui.runtime':moquiRuntime]
    main = '-jar'; args = [warName, '-load']
}
task loadProduction(type: JavaExec) {
    dependsOn ':framework:build'
    workingDir = '.'; jvmArgs = ['-server', '-XX:MaxPermSize=64m']; maxHeapSize = '256M'
    systemProperties = ['moqui.conf':moquiConfProduction, 'moqui.runtime':moquiRuntime]
    main = '-jar'; args = [warName, '-load']
}

// ========== deploy tasks ==========

task deployTomcat << {
    // remove runtime directory, may have been added for logs/etc
    delete file(tomcatHome + '/runtime')
    // remove ROOT directory and war to avoid conflicts
    delete file(tomcatHome + '/webapps/ROOT')
    delete file(tomcatHome + '/webapps/ROOT.war')
    // copy the war file to ROOT.war
    copy { from file(warName); into file(tomcatHome + '/webapps'); rename(warName, 'ROOT.war') }
}

task addRuntime << {
    // unzip the "moqui-${version}.war" file to the wartemp directory
    //directory { dir = file('wartemp') }
    copy { from zipTree(warName); into file('wartemp') }
    // copy runtime directory (with a few exceptions) into a runtime directory in the war
    copy {
        from fileTree(dir: '.', include: moquiRuntime+'/**', excludes: ['**/*.jar', moquiRuntime+'/lib/**', moquiRuntime+'/db/**', moquiRuntime+'/log/**'])
        into file('wartemp')
    }
    // copy the jar files from runtime/lib
    copy { from fileTree(dir: moquiRuntime+'/lib', include: '*.jar'); into 'wartemp/WEB-INF/lib' }
    // copy the jar files from components
    // this copies whole directory tree, how to just get files? copy { from fileTree(dir: 'runtime/component', include: '**/*.jar'); into 'wartemp/WEB-INF/lib' }
    // add MoquiInit.properties fresh copy, just in case it was changed
    copy { from file('MoquiInit.properties'); into 'wartemp/WEB-INF/classes' }

    // zip it up again
    ant.zip(destfile: 'moqui-plus-runtime.war') { fileset(dir: 'wartemp') { include(name: '**/*') } }
    // alternative once supported: zip { archiveName 'moqui-plus-runtime.war'; from fileTree(dir: 'wartemp', include: '**/*') }
    // clean up the temporary directory
    delete file('wartemp')
}
