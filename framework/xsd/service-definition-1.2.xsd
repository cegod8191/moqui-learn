<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:include schemaLocation="common-types-1.2.xsd"/>
    <xs:include schemaLocation="xml-actions-1.2.xsd"/>

    <!-- root element -->
    <xs:element name="services">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="service"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="service">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="description"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="implements"/>
                <xs:element minOccurs="0" ref="in-parameters"/>
                <xs:element minOccurs="0" ref="out-parameters"/>
                <xs:element minOccurs="0" ref="actions"/>
            </xs:sequence>
            <xs:attribute name="verb" type="xs:string" use="required">
                <xs:annotation><xs:documentation>
                    This can be any verb, and will often be one of: create, update, delete, or find. The full name of
                    the service will be: "${verb}${noun}". The verb is required and the noun is optional so if there is
                    no noun the service name will be just the verb.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="noun" type="xs:string" use="optional">
                <xs:annotation><xs:documentation>
                    For entity-auto services this should be a valid entity name. In many other cases an entity name is
                    the best way to describe what is being acted on, but this can really be anything.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" default="inline">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="inline"/>
                        <xs:enumeration value="entity-auto"/>
                        <xs:enumeration value="script"/>
                        <xs:enumeration value="java"/>
                        <xs:enumeration value="interface"/>
                        <xs:enumeration value="remote-xml-rpc"/>
                        <xs:enumeration value="remote-json-rpc"/>
                        <xs:enumeration value="camel"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="location" type="xs:string" use="optional"/>
            <xs:attribute name="method" type="xs:string" use="optional"/>
            <xs:attribute name="authenticate" default="true">
                <xs:annotation><xs:documentation>
                    If not set to false (is true by default) a user much be logged in to run this service. If the
                    service is running in an ExecutionContext with a user logged in that will qualify. If not then
                    either a "authUserAccount" parameter or the "authUsername" AND "authPassword" parameters must be
                    specified and must contain valid values for a user of the system.

                    If the "authUserAccount" parameter or the "authUsername" AND "authPassword" parameters are passed
                    in they will be used for the service call even if a user is logged in to the ExecutionContext that
                    the service is running in.

                    An "authTenantId" parameter may also be specified to authenticate the user in a specific tenant
                    instance. If specified will be used to run the service with that as the context tenant.

                    If set to anonymous-all or anonymous-view not only with authentication not be required, but this
                    service will run as if authorized (using the _NA_ UserAccount) for all actions or for view-only.
                </xs:documentation></xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                        <xs:enumeration value="anonymous-all"/>
                        <xs:enumeration value="anonymous-view"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="allow-remote" type="boolean" default="false"/>
            <xs:attribute name="validate" type="boolean" default="true"/>
            <xs:attribute name="transaction" default="use-or-begin">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="ignore"><xs:annotation><xs:documentation>Don't do anything with
                            transactions (if one is in place use it, if no transaction in place don't begin one)</xs:documentation></xs:annotation></xs:enumeration>
                        <xs:enumeration value="use-or-begin"><xs:annotation><xs:documentation>Use active transaction or
                            if no active transaction begin one</xs:documentation></xs:annotation></xs:enumeration>
                        <xs:enumeration value="force-new"><xs:annotation><xs:documentation>Always being a new
                            transaction, pausing the active transaction if there is one</xs:documentation></xs:annotation></xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="transaction-timeout" type="xs:int">
                <xs:annotation><xs:documentation>
                    Defines the timeout for the transaction, in seconds.
                    This value is only used if this service begins a transaction (either require-new, or
                    use-or-begin and there is no other transaction already in place).
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <!-- not supported by Atomikos/etc right now, consider for later:
            <xs:attribute name="transaction-isolation" type="isolation-level" use="optional">
                <xs:annotation><xs:documentation>
                    The transaction isolation level to use if a transaction is begun when calling this service.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            -->
            <!-- Tabled for now, not to be part of 1.0: <xs:attribute name="max-retry" type="xs:int" default="-1"/> -->
            <xs:attribute name="semaphore" default="none">
                <xs:annotation><xs:documentation>
                    Intended for use in long-running services (usually scheduled). This uses a record in the database
                    to "lock" the service so that only one instance of it can run against a given database at any
                    given time.
                </xs:documentation></xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="none"/>
                        <xs:enumeration value="fail"/>
                        <xs:enumeration value="wait"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="semaphore-timeout" type="xs:int" default="120">
                <xs:annotation><xs:documentation>When waiting how long before timing out, in seconds.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="semaphore-sleep" type="xs:int" default="5">
                <xs:annotation><xs:documentation>When waiting how long to sleep between checking the semaphore, in
                    seconds.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="semaphore-ignore" type="xs:int" default="3600">
                <xs:annotation><xs:documentation>Ignore existing semaphores after this time, in seconds.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="in-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="auto-parameters"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="out-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="auto-parameters"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="implements">
        <xs:complexType>
            <xs:attribute name="service" type="xs:string" use="required"/>
            <xs:attribute name="required" type="boolean" use="optional">
                <xs:annotation><xs:documentation>If set to true or false all parameters inherited have that value for
                    the required attribute.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="auto-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="exclude"/>
            </xs:sequence>
            <xs:attribute name="entity-name" type="xs:string"/>
            <xs:attribute name="include" default="all">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="pk"/>
                        <xs:enumeration value="nonpk"/>
                        <xs:enumeration value="all"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attributeGroup ref="attlist.parameter-general"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="exclude">
        <xs:complexType>
            <xs:attribute name="field-name" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="ParameterValidations" abstract="true"/>
    <xs:element name="parameter">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="description"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="subtype"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter">
                    <xs:annotation><xs:documentation>Nested parameters are for Map and Node (groovy.util.Node) type
                        parameters only.</xs:documentation></xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations">
                    <xs:annotation><xs:documentation>To override the default message for each just add the message
                        inside the element.</xs:documentation></xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="type" type="xs:string" default="String"/>
            <xs:attribute name="format" type="xs:string">
                <xs:annotation><xs:documentation>
                    Used only when the parameter is passed in as a String but the type is
                    something other than String to convert to that type.

                    For date/time uses standard Java format strings described here:
                    http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="default-value" type="xs:string">
                <xs:annotation><xs:documentation>The value specified will be used for the parameter if no value is
                    passed in (only used if required=false).</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attributeGroup ref="attlist.parameter-general"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="attlist.parameter-general">
        <xs:attribute name="required" default="false">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="disabled">
                        <xs:annotation><xs:documentation>Behave the same as if the parameter did not exist. Useful when
                            overriding a previously defined parameter.</xs:documentation></xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="allow-html" default="none">
            <xs:annotation><xs:documentation>
                Applies only to String fields. Only checked for incoming parameters (meant for validating input from
                users, other systems, etc). Defaults to "none" meaning no HTML is allowed (will result in an error
                message).

                If some HTML is desired then use "safe" which will follow the rules in the antisamy-esapi.xml file.
                This should be safe for both internal and public users.

                In rare cases when users are trusted or it is not a sensitive field the "any" option may be used to not
                check the HTML content at all.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="any"/>
                    <xs:enumeration value="safe"/>
                    <xs:enumeration value="none"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>

    <xs:element name="subtype">
        <xs:annotation><xs:documentation>
            The valid type if the parameter.type or the parent subtype is a Map or any type of collection.

            If the parent type is a Map then the key should be a String and the value should be the type of the subtype
            where the key attribute matches the Map key, or for all other Map keys not specified the subtype with no
            key specified.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="subtype"/></xs:sequence>
            <xs:attribute name="key" type="xs:string"/>
            <xs:attribute name="type" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="val-or" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="val-and" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="val-not" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="matches" substitutionGroup="ParameterValidations">
        <xs:annotation><xs:documentation>Validate the current parameter against the regular expression specified in the
            regexp attribute.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:attribute name="regexp" type="xs:string" use="required"/>
            <xs:attribute name="message" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="number-range" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:attribute name="min" type="xs:decimal">
                <xs:annotation><xs:documentation>To pass number must be greater than or equal to this value.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="min-include-equals" type="boolean" default="true">
                <xs:annotation><xs:documentation>Should the range include equal to the min number? Defaults to true.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="max" type="xs:decimal">
                <xs:annotation><xs:documentation>To pass number must be less than this value.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="max-include-equals" type="boolean" default="false">
                <xs:annotation><xs:documentation>Should the range include equal to the max number? Defaults to false (exclusive).</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="number-integer" substitutionGroup="ParameterValidations"/>
    <xs:element name="number-decimal" substitutionGroup="ParameterValidations"/>

    <xs:element name="text-length" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:attribute name="min" type="xs:nonNegativeInteger"/>
            <xs:attribute name="max" type="xs:nonNegativeInteger"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-email" substitutionGroup="ParameterValidations"/>
    <xs:element name="text-url" substitutionGroup="ParameterValidations"/>
    <xs:element name="text-letters" substitutionGroup="ParameterValidations"/>
    <xs:element name="text-digits" substitutionGroup="ParameterValidations"/>

    <xs:element name="time-range" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:attribute name="after" type="xs:string"><xs:annotation><xs:documentation>Can be date/time string, or
                "now" to compare to the current time.</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="before" type="xs:string"><xs:annotation><xs:documentation>Can be date/time string, or
                "now" to compare to the current time.</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="format" type="xs:string"><xs:annotation><xs:documentation>If the value is a String
                instead of Date/Time/Timestamp, specify the format for conversion here.</xs:documentation></xs:annotation></xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="credit-card" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:attribute name="types" type="xs:string">
                <xs:annotation><xs:documentation>
                    A comma-separate list of the types of credit card to allow. The available options include:
                        visa,mastercard,amex,discover,enroute,jcb,solo,switch,dinersclub,visaelectron

                    If empty defaults to allow any type of card (ie doesn't check the card type, just checks the number
                    using the Luhn MOD-10 checksum).
                </xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
</xs:schema>
