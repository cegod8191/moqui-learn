<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:include schemaLocation="common-types-1.2.xsd"/>
    <xs:include schemaLocation="xml-actions-1.2.xsd"/>

    <xs:element name="AllWidgets" abstract="true"/>
    <xs:element name="StandaloneFields" abstract="true"/>
    
    <!-- ================== form ==================== -->
    <xs:element name="form-single" substitutionGroup="AllWidgets">
        <xs:annotation><xs:documentation>A single form is used to view or edit fields of a single map/hash/record/etc.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element minOccurs="0" ref="auto-fields-service"/>
                    <xs:element minOccurs="0" ref="auto-fields-entity"/>
                    <xs:element minOccurs="0" ref="field"/>
                </xs:choice>
                <xs:element minOccurs="0" ref="field-layout"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="extends" type="xs:string">
                <xs:annotation><xs:documentation>The location and name (separated by a hash/pound sign) of the form to
                    extend. If there is no location is a form in the current screen.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="transition" type="xs:string"/>
            <xs:attribute name="map" type="xs:string" default="fieldValues"/>
            <xs:attribute name="focus-field" type="xs:string"/>
            <xs:attribute name="skip-start" type="boolean" default="false"/>
            <xs:attribute name="skip-end" type="boolean" default="false"/>
            <xs:attribute name="dynamic" type="boolean" default="false">
                <xs:annotation><xs:documentation>If true then this form will be considered dynamic and the internal
                    definition will be built up each time it is used instead of only when first referred to.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>


    <xs:element name="form-list" substitutionGroup="AllWidgets">
        <xs:annotation><xs:documentation>A
            list form is a list of individual forms in a table (could
            be called a tabular form), it has a list of sets of values and creates one form for each
            list element.

            A variation on the list form is the multi form (set the attribute multi=true). In the multi mode all
            list elements will be put into a single large form with suffixes on each field for each row, with a
            single submit button at the bottom instead of a submit button on each row.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="row-actions"/>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element minOccurs="0" ref="auto-fields-service"/>
                    <xs:element minOccurs="0" ref="auto-fields-entity"/>
                    <xs:element minOccurs="0" ref="field"/>
                </xs:choice>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="form-list-column"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="extends" type="xs:string">
                <xs:annotation><xs:documentation>The location and name (separated by a hash/pound sign) of the form to
                    extend. If there is no location is a form in the current screen.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="multi" default="true" type="boolean"/>
            <xs:attribute name="transition" type="xs:string"/>
            <xs:attribute name="list" type="xs:string">
                <xs:annotation><xs:documentation>The name of the list in the context to iterate over.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="list-entry" type="xs:string">
                <xs:annotation><xs:documentation>If specified each list entry will be put in the context with this
                    name; otherwise the list entry must be a Map and the entries in the Map will be put into the context
                    root directly.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="paginate" type="xs:string" default="true">
                <xs:annotation><xs:documentation>Indicate if this form should paginate or not. Defaults to true.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="skip-start" type="boolean" default="false"/>
            <xs:attribute name="skip-end" type="boolean" default="false"/>
            <xs:attribute name="dynamic" type="boolean" default="false">
                <xs:annotation><xs:documentation>If true then this form will be considered dynamic and the internal
                    definition will be built up each time it is used instead of only when first referred to.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="row-actions">
        <xs:complexType>
            <xs:sequence><xs:group minOccurs="0" maxOccurs="unbounded" ref="AllOperations"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="auto-fields-service">
        <xs:complexType>
            <xs:attribute name="service-name" type="xs:string" use="required"/>
            <xs:attribute name="field-type" default="edit">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="edit"/>
                        <xs:enumeration value="find"/>
                        <xs:enumeration value="display"/>
                        <xs:enumeration value="find-display"/>
                        <xs:enumeration value="hidden"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="include" default="in">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="in"/>
                        <xs:enumeration value="out"/>
                        <xs:enumeration value="all"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="auto-fields-entity">
        <xs:complexType>
            <xs:attribute name="entity-name" type="xs:string" use="required"/>
            <xs:attribute name="include" default="all">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="pk"/>
                        <xs:enumeration value="nonpk"/>
                        <xs:enumeration value="all"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="field-type" default="find-display">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="edit"/>
                        <xs:enumeration value="find"/>
                        <xs:enumeration value="display"/>
                        <xs:enumeration value="find-display"/>
                        <xs:enumeration value="hidden"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="field-layout">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="field-group"/>
                <xs:element ref="field-row"/>
                <xs:element ref="field-ref"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="collapsible" type="boolean"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="field-group">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="field-ref"/>
                <xs:element ref="field-row"/>
            </xs:choice>
            <xs:attribute name="title" type="xs:string" use="required"/>
            <xs:attribute name="style" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="field-row">
        <xs:annotation><xs:documentation>Fields in the field-row will be "floated" left so that they stack up on a
            single line as long as them will fit, and then will overflow to the next line, etc.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="field-ref"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="form-list-column">
        <xs:annotation><xs:documentation>Fields in this set will be in the same column in the list form table.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="field-ref"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="field-ref">
        <xs:complexType><xs:attribute name="name" type="xs:string" use="required"/></xs:complexType>
    </xs:element>

    <!-- ================== Standalone Fields ==================== -->
    <xs:element name="link" substitutionGroup="StandaloneFields">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
                <xs:element minOccurs="0" ref="image"/>
            </xs:sequence>

            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="link-type" default="auto">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="auto"><xs:annotation><xs:documentation>
                            If selected the hidden-form type will be used if the url-mode is transition and the
                            transition has an event, otherwise the anchor type will be used.
                        </xs:documentation></xs:annotation></xs:enumeration>
                        <xs:enumeration value="anchor"/>
                        <xs:enumeration value="hidden-form"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="url" type="xs:string" use="required"/>
            <xs:attribute name="url-type" type="url-type" default="transition"><xs:annotation><xs:documentation>
                The type for the url attribute. Defaults to transition (on this screen).
            </xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="text" type="xs:string"/>
            <xs:attribute name="target-window" type="xs:string"/>
            <xs:attribute name="confirmation" type="xs:string"><xs:annotation><xs:documentation>
                If there is a message here it will show in a confirmation box when the link is clicked on.
            </xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="parameter-map" type="xs:string"><xs:annotation><xs:documentation>
                A Map to get parameter names and values from in addition to the parameter sub-elements.
            </xs:documentation></xs:annotation></xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="image" substitutionGroup="StandaloneFields">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="url" type="xs:string" use="required"/>
            <xs:attribute name="url-type" type="url-type" default="content"/>
            <xs:attribute name="width" type="xs:string"/>
            <xs:attribute name="height" type="xs:string"/>
            <xs:attribute name="alt" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="label" substitutionGroup="StandaloneFields">
        <xs:complexType>
            <xs:attribute name="text" type="xs:string"/>
            <xs:attribute name="type" default="span">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="p"/>
                        <xs:enumeration value="span"/>
                        <xs:enumeration value="h1"/>
                        <xs:enumeration value="h2"/>
                        <xs:enumeration value="h3"/>
                        <xs:enumeration value="h4"/>
                        <xs:enumeration value="h5"/>
                        <xs:enumeration value="h6"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="encode" default="true" type="boolean">
                <xs:annotation><xs:documentation>
                    If true text will be encoded so that it does not interfere with markup of the target output.

                    For example, if output is HTML then data presented will be HTML encoded so that all
                    HTML-specific characters are escaped.
                </xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="parameter">
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="from" type="xs:string"/>
            <xs:attribute name="value" type="xs:string"/>
        </xs:complexType>
    </xs:element>

  <!-- ================== Input Fields ==================== -->
    <xs:element name="SubFields" abstract="true"/>
    <xs:element name="field">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="header-field"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="conditional-field"/>
                <xs:element minOccurs="0" ref="default-field"/>
                <!-- tabled, not to be part of 1.0: <xs:element minOccurs="0" maxOccurs="unbounded" ref="visible-when"/> -->
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation><xs:documentation>A unique name for this field. Used for the parameter name, referencing
                    the field in other places, etc.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="entry-name" type="xs:string">
                <xs:annotation><xs:documentation>The name of the entry in the context that contains the value to use for
                    this field. By default will use the field name and look in the context and if not found in the
                    context then in a map called "fieldValues" (ie: "fieldValues.${name}"). With this convention when
                    you do an entity find to get a recard to edit, use "fieldValues" for the value-field.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="hide" type="boolean">
                <xs:annotation><xs:documentation>If false field will always be visible (at least the title if nothing
                    else). If true will always be hidden regardless of title and widgets defined. If empty (default)
                    will guess based on definition of field.

                    Note that for form-list fields this governs the entire column for the field, and not just a single
                    row.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="validate-service" type="xs:string"/>
            <xs:attribute name="validate-parameter" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="header-field">
        <xs:annotation><xs:documentation>
            Only applicable to fields until a form-list element.
            Used to show a field to filter the results by (instead of a separate search form), and/or to show the
            order-by option in the header.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice>
                    <xs:element minOccurs="0" ref="SubFields"/>
                    <xs:element minOccurs="0" ref="AllWidgets"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="title" type="xs:string">
                <xs:annotation><xs:documentation>The name of this field that will be shown to the user; can use the ${}
                    and map.key (dot) syntax to insert values from the context.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="show-order-by" default="false">
                <xs:annotation><xs:documentation>Only applicable to multi and list type forms. If true header links for
                    ordering by this field will be displayed.</xs:documentation></xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                        <xs:enumeration value="case-insensitive"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="conditional-field">
        <xs:complexType>
            <xs:sequence>
                <xs:choice>
                    <xs:element minOccurs="0" ref="SubFields"/>
                    <xs:element minOccurs="0" ref="AllWidgets"/>
                </xs:choice>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="StandaloneFields"/>
            </xs:sequence>
            <xs:attribute name="condition" type="xs:string" use="required">
                <xs:annotation><xs:documentation>A boolean expression in Groovy.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attributeGroup ref="attlist.conditional-field"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="default-field">
        <xs:complexType>
            <xs:sequence>
                <xs:choice>
                    <xs:element minOccurs="0" ref="SubFields"/>
                    <xs:element minOccurs="0" ref="AllWidgets"/>
                </xs:choice>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="StandaloneFields"/>
            </xs:sequence>
            <xs:attributeGroup ref="attlist.conditional-field"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="attlist.conditional-field">
        <xs:attribute name="title" type="xs:string">
            <xs:annotation><xs:documentation>The name of this field that will be shown to the user; can use the ${}
                and map.key (dot) syntax to insert values from the context.</xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="tooltip" type="xs:string">
            <xs:annotation><xs:documentation>The text to show on mouse over or help for more information; can use
                the ${} and map.key (dot) syntax to insert values from the context.</xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="red-when" default="by-name">
            <xs:annotation><xs:documentation>The widget/interaction part will be red if the date value is before-now
                (for thruDate), after-now (for fromDate), or by-name (if the field's name or entry-name or fromDate
                or thruDate the corresponding action will be done); only applicable when the field is a timestamp.</xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="never"/>
                    <xs:enumeration value="before-now"/>
                    <xs:enumeration value="after-now"/>
                    <xs:enumeration value="by-name"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <!-- TABLED, not to be part of 1.0:
    <xs:element name="visible-when">
        <xs:annotation><xs:documentation>
            Used to dynamically show or hide a field based on the value of another field (usually a drop-down).
            If any of these elements are present the field is hidden unless one of the field/value pairs is a match.
            For more complex conditions on visibility custom event handling should be used (ie JavaScript for HTML/Web
                pages, Java/Groovy for Desktop UI, etc).
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:attribute name="field" type="xs:string" use="required">
                <xs:annotation><xs:documentation>The name of the field (usually a drop-down) used to determine if this
                    field should be visible or not.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation><xs:documentation>The value the field should match in order for this to be visible.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    -->

  <!-- ================== Field Sub-Elements ==================== -->
    <xs:element name="check" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="entity-options"/>
                <xs:element ref="list-options"/>
                <xs:element ref="option"/>
            </xs:choice>
            <xs:attribute name="no-current-selected-key" type="xs:string"/>
            <xs:attribute name="all-checked" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="date-find" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="type" default="timestamp">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="timestamp"/>
                        <xs:enumeration value="date-time"/>
                        <xs:enumeration value="date"/>
                        <xs:enumeration value="time"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="format" type="xs:string">
                <xs:annotation><xs:documentation>Used to format the output of Time/Date/Timestamp objects. With
                    auto-fields-service will inherit from service parameter.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="default-value-from" type="xs:string"/>
            <xs:attribute name="default-value-thru" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="date-time" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="type" default="timestamp">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="timestamp"/>
                        <xs:enumeration value="date-time"/>
                        <xs:enumeration value="date"/>
                        <xs:enumeration value="time"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="format" type="xs:string">
                <xs:annotation><xs:documentation>Used to format the output of Time/Date/Timestamp objects. With
                    auto-fields-service will inherit from service parameter.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="default-value" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="display" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="also-hidden" default="true" type="boolean">
                <xs:annotation><xs:documentation>If set to true, a hidden form field is also rendered, with the name of
                    the field and its value.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="text" type="xs:string">
                <xs:annotation><xs:documentation>Specifies the string to display, can use the ${} syntax to insert
                    context values; if empty the value of the field will be printed for a default.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="currency-unit-field" type="xs:string">
                <xs:annotation><xs:documentation>Specifies the currency uomId (ISO code) used to format the value.
                Will only format as currency if this is specified.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="format" type="xs:string">
                <xs:annotation><xs:documentation>Used to format the output of Number/Time/Date/Timestamp/etc objects.
                    With auto-fields-service will inherit from service parameter.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="encode" default="true" type="boolean">
                <xs:annotation><xs:documentation>
                    If true text will be encoded so that it does not interfere with markup of the target output.
                </xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="display-entity" substitutionGroup="SubFields">
        <xs:annotation><xs:documentation>This is just like display but looks up a description using the Entity Facade;
            note that if also-hidden is true then it uses the key as the value, not the shown description.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:attribute name="entity-name" type="xs:string" use="required"/>
            <xs:attribute name="key-field-name" type="xs:string"/>
            <xs:attribute name="text" type="xs:string" default="${description}"/>
            <xs:attribute name="use-cache" default="true" type="boolean"/>
            <xs:attribute name="also-hidden" default="true" type="boolean"/>
            <xs:attribute name="encode" default="true" type="boolean">
                <xs:annotation><xs:documentation>
                    If true text will be encoded so that it does not interfere with markup of the target output.
                </xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="drop-down" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:sequence>
                <xs:choice>
                    <xs:element ref="dynamic-options"/>
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="entity-options"/>
                        <xs:element ref="list-options"/>
                        <xs:element ref="option"/>
                    </xs:choice>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="allow-empty" type="boolean" default="false"/>
            <xs:attribute name="allow-multiple" type="boolean" default="false"/>
            <xs:attribute name="size" type="xs:integer" default="1"/>
            <xs:attribute name="current" default="first-in-list">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="first-in-list"/>
                        <xs:enumeration value="selected"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="no-current-selected-key" type="xs:string">
                <xs:annotation><xs:documentation>The key to mark as selected when there is no current entry value.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="current-description" type="xs:string"/>
            <xs:attribute name="combo-box" type="boolean" default="false"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="file" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="size" type="xs:positiveInteger" default="30"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="hidden" substitutionGroup="SubFields">
        <xs:complexType><xs:attribute name="default-value" type="xs:string"/></xs:complexType>
    </xs:element>
    <xs:element name="ignored" substitutionGroup="SubFields"><xs:complexType/></xs:element>
    <!-- TABLED, not to be part of 1.0:
    <xs:element name="lookup" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="target-screen" type="xs:string" use="required"/>
            <xs:attribute name="size" type="xs:positiveInteger" default="30"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value" type="xs:string"/>
            <xs:attribute name="disabled" default="false" type="boolean"/>
            <xs:attribute name="secondary-field" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    -->
    <xs:element name="password" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="size" type="xs:positiveInteger" default="30"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="radio" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="entity-options"/>
                <xs:element ref="list-options"/>
                <xs:element ref="option"/>
            </xs:choice>
            <xs:attribute name="no-current-selected-key" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="range-find" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="size" type="xs:positiveInteger" default="10"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value-from" type="xs:string"/>
            <xs:attribute name="default-value-thru" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="reset" substitutionGroup="SubFields"><xs:complexType/></xs:element>
    <xs:element name="submit" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="image"/>
            </xs:sequence>
            <xs:attribute name="confirmation" type="xs:string"><xs:annotation><xs:documentation>
                If there is a message here it will show in a confirmation box when the button is clicked on.
            </xs:documentation></xs:annotation></xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-line" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="size" type="xs:positiveInteger" default="30"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value" type="xs:string"/>
            <xs:attribute name="disabled" default="false" type="boolean"/>
            <xs:attribute name="format" type="xs:string">
                <xs:annotation><xs:documentation>Used to format the output of Number/Time/Date/Timestamp/etc objects.
                    With auto-fields-service will inherit from service parameter.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="ac-transition" type="xs:string" use="optional">
                <xs:annotation><xs:documentation>If specified the text-line will have auto-complete added to it with
                    this transition as the source of the auto-complete options.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="ac-delay" type="xs:positiveInteger" default="300"/>
            <xs:attribute name="ac-min-length" type="xs:positiveInteger" default="1"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-area" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="cols" type="xs:positiveInteger" default="60"/>
            <xs:attribute name="rows" type="xs:positiveInteger" default="3"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value" type="xs:string"/>
            <xs:attribute name="read-only" default="false" type="boolean"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-find" substitutionGroup="SubFields">
        <xs:complexType>
            <xs:attribute name="size" type="xs:positiveInteger" default="30"/>
            <xs:attribute name="maxlength" type="xs:positiveInteger"/>
            <xs:attribute name="default-value" type="xs:string"/>
            <xs:attribute name="ignore-case" default="true" type="boolean"/>
            <xs:attribute name="default-operator" default="contains">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="equals"/>
                        <xs:enumeration value="like"/>
                        <xs:enumeration value="contains"/>
                        <xs:enumeration value="empty"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="hide-options" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                        <xs:enumeration value="ignore-case"/>
                        <xs:enumeration value="operator"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <!-- ================== Field Sub-Sub-Elements ==================== -->
    <xs:element name="entity-options">
        <xs:annotation><xs:documentation>Look up options for the field using the named entity.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="entity-find"/>
            </xs:sequence>
            <xs:attribute name="key" type="xs:string">
                <xs:annotation><xs:documentation>The text representing the key. Use the ${} syntax to insert entries
                    from the entity value or from the context. If empty will use the first primary key field name to
                    lookup a value in the context.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="text" type="xs:string">
                <xs:annotation><xs:documentation>Actual text shown to the user. Use the ${} syntax to insert variables.
                    If empty defaults to the value of the key.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="list-options">
        <xs:annotation><xs:documentation>Create options based on data in a List of Maps.</xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:attribute name="list" type="xs:string" use="required">
                <xs:annotation><xs:documentation>The name of the list to iterate through to get values.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="key" type="xs:string">
                <xs:annotation><xs:documentation>The text representing the key. Use the ${} syntax to insert entries
                    from a Map in the list or from the context. If empty and the List contains EntityValue instances
                    then will use the first primary key field name to lookup a value in the context, otherwise will
                    use the name of the field to lookup a value in the context.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="text" type="xs:string">
                <xs:annotation><xs:documentation>Actual text shown to the user. Use the ${} syntax to insert entries
                    from a Map in the list or from the context. If empty defaults to the value of the key.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="option">
        <xs:complexType>
            <xs:attribute name="key" type="xs:string" use="required"/>
            <xs:attribute name="text" type="xs:string">
                <xs:annotation><xs:documentation>What the user will see in the widget; defaults to the value of the key
                    attribute.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="dynamic-options">
        <xs:annotation><xs:documentation>Look up options for the field using a JSON over HTTP call to a server.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="depends-on">
                    <xs:annotation><xs:documentation>When getting data from the server the value of this field will be
                        passed in the request. When the field named here changes these options will be updated.</xs:documentation></xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="transition" type="xs:string">
                <xs:annotation><xs:documentation>The transition in this screen to get the option list from.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="value-field" type="xs:string" default="value">
                <xs:annotation><xs:documentation>The field in the result that represents the value (key) for the option.</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="label-field" type="xs:string" default="label">
                <xs:annotation><xs:documentation>The field in the result that represents the label for the option.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="depends-on">
        <xs:complexType>
            <xs:attribute name="field" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
